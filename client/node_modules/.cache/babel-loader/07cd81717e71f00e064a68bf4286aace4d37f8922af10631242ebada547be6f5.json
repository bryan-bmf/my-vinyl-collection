{"ast":null,"code":"var _jsxFileName = \"/Users/bryanmitchell/Documents/react-projects/my-vinyl-collection/src/components/AlbumCover.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { artistData } from \"../data/seed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlbumCover = props => {\n  _s();\n  const [data, setData] = useState(artistData);\n  const [token, setToken] = useState(\"\");\n  const [albums, setAlbums] = useState();\n  const clientID = process.env.REACT_APP_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_CLIENT_SECRET;\n  const tokenUrl = \"https://accounts.spotify.com/api/token\";\n\n  // set up fetch body\n  const postBody = {\n    client_id: clientID,\n    client_secret: clientSecret,\n    grant_type: \"client_credentials\"\n  };\n  const encodedBody = new URLSearchParams(Object.entries(postBody)).toString();\n  const fetchToken = async () => {\n    const resp = await fetch(tokenUrl, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: encodedBody\n    });\n    if (!resp.ok) throw new Error(\"explot贸\");\n    const respData = await resp.json();\n    setToken(respData.access_token);\n  };\n  const fetchAlbumCover = async () => {\n    const albumUrl = \"https://api.spotify.com/v1/\" + props.type + \"albums/\" + props.spotifyAlbumId;\n    const resp = await fetch(albumUrl, {\n      method: \"GET\",\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    if (!resp.ok) throw new Error(\"explot贸\");\n    const respData = await resp.json();\n    console.log(respData);\n    let album = {};\n  };\n  useEffect(() => {\n    fetchToken();\n    fetchAlbumCover();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(AlbumCover, \"REHhmGw40WfQHSfM7unGMLVYYSs=\");\n_c = AlbumCover;\nexport default AlbumCover;\nvar _c;\n$RefreshReg$(_c, \"AlbumCover\");","map":{"version":3,"names":["useEffect","useState","artistData","jsxDEV","_jsxDEV","AlbumCover","props","_s","data","setData","token","setToken","albums","setAlbums","clientID","process","env","REACT_APP_CLIENT_ID","clientSecret","REACT_APP_CLIENT_SECRET","tokenUrl","postBody","client_id","client_secret","grant_type","encodedBody","URLSearchParams","Object","entries","toString","fetchToken","resp","fetch","method","headers","body","ok","Error","respData","json","access_token","fetchAlbumCover","albumUrl","type","spotifyAlbumId","console","log","album","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bryanmitchell/Documents/react-projects/my-vinyl-collection/src/components/AlbumCover.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { artistData } from \"../data/seed\";\nimport { AnyObject } from \"../types\";\n\nconst AlbumCover = (props: any) => {\n\tconst [data, setData] = useState<Array<AnyObject>>(artistData);\n\tconst [token, setToken] = useState<String>(\"\");\n\tconst [albums, setAlbums] = useState<Array<AnyObject>>();\n\n\n\tconst clientID = process.env.REACT_APP_CLIENT_ID;\n\tconst clientSecret = process.env.REACT_APP_CLIENT_SECRET;\n\n\tconst tokenUrl = \"https://accounts.spotify.com/api/token\";\n\n\t// set up fetch body\n    const postBody: AnyObject = {client_id: clientID, client_secret: clientSecret, grant_type: \"client_credentials\"}\n    const encodedBody = new URLSearchParams(Object.entries(postBody)).toString();\n\n\tconst fetchToken = async () => {\n\t\tconst resp = await fetch(tokenUrl, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tbody: encodedBody,\n\t\t});\n\n        if(!resp.ok)\n            throw new Error(\"explot贸\")\n\n        const respData = await resp.json()\n\t\tsetToken(respData.access_token)\n\t};\n\n\tconst fetchAlbumCover = async () => {\n\t\tconst albumUrl = \"https://api.spotify.com/v1/\" + props.type + \"albums/\" + props.spotifyAlbumId\n\n\t\tconst resp = await fetch(albumUrl, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t'Authorization': 'Bearer ' + token,\n\t\t\t},\n\t\t});\n\n        if(!resp.ok)\n            throw new Error(\"explot贸\")\n\n        const respData = await resp.json()\n\t\tconsole.log(respData)\n\n\t\tlet album = {}\n\n\n\t};\n\n    useEffect(() => {\n        fetchToken()\n\t\tfetchAlbumCover()\n    }, [])\n\n\treturn <h1>hi</h1>;\n};\n\nexport default AlbumCover;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1C,MAAMC,UAAU,GAAIC,KAAU,IAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAmBC,UAAU,CAAC;EAC9D,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAmB,CAAC;EAGxD,MAAMa,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB;EAChD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB;EAExD,MAAMC,QAAQ,GAAG,wCAAwC;;EAEzD;EACG,MAAMC,QAAmB,GAAG;IAACC,SAAS,EAAER,QAAQ;IAAES,aAAa,EAAEL,YAAY;IAAEM,UAAU,EAAE;EAAoB,CAAC;EAChH,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,OAAO,CAACP,QAAQ,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC;EAE/E,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACZ,QAAQ,EAAE;MAClCa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB,CAAC;MACDC,IAAI,EAAEV;IACP,CAAC,CAAC;IAEI,IAAG,CAACM,IAAI,CAACK,EAAE,EACP,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;IAE9B,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;IACxC5B,QAAQ,CAAC2B,QAAQ,CAACE,YAAY,CAAC;EAChC,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,QAAQ,GAAG,6BAA6B,GAAGpC,KAAK,CAACqC,IAAI,GAAG,SAAS,GAAGrC,KAAK,CAACsC,cAAc;IAE9F,MAAMb,IAAI,GAAG,MAAMC,KAAK,CAACU,QAAQ,EAAE;MAClCT,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACR,eAAe,EAAE,SAAS,GAAGxB;MAC9B;IACD,CAAC,CAAC;IAEI,IAAG,CAACqB,IAAI,CAACK,EAAE,EACP,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;IAE9B,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;IACxCM,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;IAErB,IAAIS,KAAK,GAAG,CAAC,CAAC;EAGf,CAAC;EAEE/C,SAAS,CAAC,MAAM;IACZ8B,UAAU,CAAC,CAAC;IAClBW,eAAe,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAET,oBAAOrC,OAAA;IAAA4C,QAAA,EAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACnB,CAAC;AAAC7C,EAAA,CA1DIF,UAAU;AAAAgD,EAAA,GAAVhD,UAAU;AA4DhB,eAAeA,UAAU;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}