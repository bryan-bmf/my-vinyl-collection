{"ast":null,"code":"var _jsxFileName = \"/Users/bryanmitchell/Documents/react-projects/my-vinyl-collection/src/components/AlbumCover.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { artistData } from \"../data/seed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlbumCover = () => {\n  _s();\n  const [data, setData] = useState(artistData);\n  const clientID = process.env.REACT_APP_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_CLIENT_SECRET;\n  const tokenUrl = \"https://accounts.spotify.com/api/token\";\n  const postBody = {\n    client_id: clientID,\n    client_secret: clientSecret,\n    grant_type: \"client_credentials\"\n  };\n  let s = new URLSearchParams(Object.entries(postBody)).toString();\n  const fetchToken = async () => {\n    const resp = await fetch(tokenUrl, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      // mode: \"cors\", // no-cors, *cors, same-origin\n      // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        // \"Content-Type\": \"application/json\",\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      // redirect: \"follow\", // manual, *follow, error\n      // referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: s // body data type must match \"Content-Type\" header\n    });\n    if (!resp.ok) throw new Error(\"explotó\");\n    const respData = await resp.json();\n    console.log(respData);\n  };\n  fetchToken();\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(AlbumCover, \"nHn2kMj48V8GMrm33xmiNHzsQSE=\");\n_c = AlbumCover;\nexport default AlbumCover;\nvar _c;\n$RefreshReg$(_c, \"AlbumCover\");","map":{"version":3,"names":["useState","artistData","jsxDEV","_jsxDEV","AlbumCover","_s","data","setData","clientID","process","env","REACT_APP_CLIENT_ID","clientSecret","REACT_APP_CLIENT_SECRET","tokenUrl","postBody","client_id","client_secret","grant_type","s","URLSearchParams","Object","entries","toString","fetchToken","resp","fetch","method","headers","body","ok","Error","respData","json","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bryanmitchell/Documents/react-projects/my-vinyl-collection/src/components/AlbumCover.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { artistData } from \"../data/seed\";\nimport { AnyObject } from \"../types\";\n\nconst AlbumCover = () => {\n\tconst [data, setData] = useState<Array<AnyObject>>(artistData);\n\n\tconst clientID = process.env.REACT_APP_CLIENT_ID;\n\tconst clientSecret = process.env.REACT_APP_CLIENT_SECRET;\n\n\tconst tokenUrl = \"https://accounts.spotify.com/api/token\";\n\n    const postBody: AnyObject = {client_id: clientID, client_secret: clientSecret, grant_type: \"client_credentials\"}\n    let s = new URLSearchParams(Object.entries(postBody)).toString();\n\n\tconst fetchToken = async () => {\n\t\tconst resp = await fetch(tokenUrl, {\n\t\t\tmethod: \"POST\", // *GET, POST, PUT, DELETE, etc.\n\t\t\t// mode: \"cors\", // no-cors, *cors, same-origin\n\t\t\t// cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n\t\t\t// credentials: \"same-origin\", // include, *same-origin, omit\n\t\t\theaders: {\n                // \"Content-Type\": \"application/json\",\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\t// redirect: \"follow\", // manual, *follow, error\n\t\t\t// referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n\t\t\tbody: s, // body data type must match \"Content-Type\" header\n\t\t});\n\n        if(!resp.ok)\n            throw new Error(\"explotó\")\n\n        const respData = await resp.json()\n        console.log(respData)\n\t};\n\n    fetchToken()\n\n\treturn <h1>hi</h1>;\n};\n\nexport default AlbumCover;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAmBC,UAAU,CAAC;EAE9D,MAAMO,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB;EAChD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB;EAExD,MAAMC,QAAQ,GAAG,wCAAwC;EAEtD,MAAMC,QAAmB,GAAG;IAACC,SAAS,EAAER,QAAQ;IAAES,aAAa,EAAEL,YAAY;IAAEM,UAAU,EAAE;EAAoB,CAAC;EAChH,IAAIC,CAAC,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,OAAO,CAACP,QAAQ,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC;EAEnE,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACZ,QAAQ,EAAE;MAClCa,MAAM,EAAE,MAAM;MAAE;MAChB;MACA;MACA;MACAC,OAAO,EAAE;QACI;QACZ,cAAc,EAAE;MACjB,CAAC;MACD;MACA;MACAC,IAAI,EAAEV,CAAC,CAAE;IACV,CAAC,CAAC;IAEI,IAAG,CAACM,IAAI,CAACK,EAAE,EACP,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;IAE9B,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EAC5B,CAAC;EAEER,UAAU,CAAC,CAAC;EAEf,oBAAOrB,OAAA;IAAAiC,QAAA,EAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACnB,CAAC;AAACnC,EAAA,CApCID,UAAU;AAAAqC,EAAA,GAAVrC,UAAU;AAsChB,eAAeA,UAAU;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}