{"ast":null,"code":"var _jsxFileName = \"/Users/bryanmitchell/Documents/react-projects/my-vinyl-collection/src/components/AlbumCover.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { artistData } from \"../data/seed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlbumCover = () => {\n  _s();\n  const [data, setData] = useState(artistData);\n  const [token, setToken] = useState(\"\");\n  const clientID = process.env.REACT_APP_CLIENT_ID;\n  const clientSecret = process.env.REACT_APP_CLIENT_SECRET;\n  const tokenUrl = \"https://accounts.spotify.com/api/token\";\n  const albumUrl = \"https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy\";\n\n  // set up fetch body\n  const postBody = {\n    client_id: clientID,\n    client_secret: clientSecret,\n    grant_type: \"client_credentials\"\n  };\n  const encodedBody = new URLSearchParams(Object.entries(postBody)).toString();\n  const fetchToken = async () => {\n    const resp = await fetch(tokenUrl, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: encodedBody\n    });\n    if (!resp.ok) throw new Error(\"explot贸\");\n    const respData = await resp.json();\n    setToken(respData.access_token);\n  };\n  const fetchAlbumCover = async () => {\n    const resp = await fetch(albumUrl, {\n      method: \"GET\",\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    if (!resp.ok) throw new Error(\"explot贸\");\n    const respData = await resp.json();\n    console.log(respData);\n  };\n  useEffect(() => {\n    fetchToken();\n    fetchAlbumCover();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(AlbumCover, \"f5UlOLSWP4Ie2VrqAKQDhQr/jog=\");\n_c = AlbumCover;\nexport default AlbumCover;\nvar _c;\n$RefreshReg$(_c, \"AlbumCover\");","map":{"version":3,"names":["useEffect","useState","artistData","jsxDEV","_jsxDEV","AlbumCover","_s","data","setData","token","setToken","clientID","process","env","REACT_APP_CLIENT_ID","clientSecret","REACT_APP_CLIENT_SECRET","tokenUrl","albumUrl","postBody","client_id","client_secret","grant_type","encodedBody","URLSearchParams","Object","entries","toString","fetchToken","resp","fetch","method","headers","body","ok","Error","respData","json","access_token","fetchAlbumCover","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bryanmitchell/Documents/react-projects/my-vinyl-collection/src/components/AlbumCover.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { artistData } from \"../data/seed\";\nimport { AnyObject } from \"../types\";\n\nconst AlbumCover = () => {\n\tconst [data, setData] = useState<Array<AnyObject>>(artistData);\n\tconst [token, setToken] = useState<String>(\"\");\n\n\tconst clientID = process.env.REACT_APP_CLIENT_ID;\n\tconst clientSecret = process.env.REACT_APP_CLIENT_SECRET;\n\n\tconst tokenUrl = \"https://accounts.spotify.com/api/token\";\n\tconst albumUrl = \"https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy\"\n\n\t// set up fetch body\n    const postBody: AnyObject = {client_id: clientID, client_secret: clientSecret, grant_type: \"client_credentials\"}\n    const encodedBody = new URLSearchParams(Object.entries(postBody)).toString();\n\n\tconst fetchToken = async () => {\n\t\tconst resp = await fetch(tokenUrl, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tbody: encodedBody,\n\t\t});\n\n        if(!resp.ok)\n            throw new Error(\"explot贸\")\n\n        const respData = await resp.json()\n\t\tsetToken(respData.access_token)\n\t};\n\n\tconst fetchAlbumCover = async () => {\n\t\tconst resp = await fetch(albumUrl, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t'Authorization': 'Bearer ' + token,\n\t\t\t},\n\t\t});\n\n        if(!resp.ok)\n            throw new Error(\"explot贸\")\n\n        const respData = await resp.json()\n\t\tconsole.log(respData)\n\t};\n\n    useEffect(() => {\n        fetchToken()\n\t\tfetchAlbumCover()\n    }, [])\n\n\treturn <h1>hi</h1>;\n};\n\nexport default AlbumCover;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAmBC,UAAU,CAAC;EAC9D,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAS,EAAE,CAAC;EAE9C,MAAMU,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB;EAChD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB;EAExD,MAAMC,QAAQ,GAAG,wCAAwC;EACzD,MAAMC,QAAQ,GAAG,0DAA0D;;EAE3E;EACG,MAAMC,QAAmB,GAAG;IAACC,SAAS,EAAET,QAAQ;IAAEU,aAAa,EAAEN,YAAY;IAAEO,UAAU,EAAE;EAAoB,CAAC;EAChH,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,OAAO,CAACP,QAAQ,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC;EAE/E,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACb,QAAQ,EAAE;MAClCc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACR,cAAc,EAAE;MACjB,CAAC;MACDC,IAAI,EAAEV;IACP,CAAC,CAAC;IAEI,IAAG,CAACM,IAAI,CAACK,EAAE,EACP,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;IAE9B,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;IACxC3B,QAAQ,CAAC0B,QAAQ,CAACE,YAAY,CAAC;EAChC,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMV,IAAI,GAAG,MAAMC,KAAK,CAACZ,QAAQ,EAAE;MAClCa,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACR,eAAe,EAAE,SAAS,GAAGvB;MAC9B;IACD,CAAC,CAAC;IAEI,IAAG,CAACoB,IAAI,CAACK,EAAE,EACP,MAAM,IAAIC,KAAK,CAAC,SAAS,CAAC;IAE9B,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;IACxCG,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;EACtB,CAAC;EAEEpC,SAAS,CAAC,MAAM;IACZ4B,UAAU,CAAC,CAAC;IAClBW,eAAe,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAET,oBAAOnC,OAAA;IAAAsC,QAAA,EAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACnB,CAAC;AAACxC,EAAA,CAnDID,UAAU;AAAA0C,EAAA,GAAV1C,UAAU;AAqDhB,eAAeA,UAAU;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}